import os

import torch

from picsellia_cv_engine import Pipeline, step
from picsellia_cv_engine.core import CocoDataset, Model
from picsellia_cv_engine.core.contexts import (
    LocalTrainingContext,
    PicselliaTrainingContext,
)
from picsellia_cv_engine.core.services.model.utils import evaluate_model_impl
from picsellia_cv_engine.frameworks.sam2.services.predictor import SAM2ModelPredictor


@step
def evaluate(model: Model, dataset: CocoDataset):
    """
    Ã‰tape d'Ã©valuation pour SAM2. Effectue une infÃ©rence complÃ¨te sur le dataset
    et loggue les rÃ©sultats dans l'expÃ©rience Picsellia.
    """
    context: PicselliaTrainingContext | LocalTrainingContext = (
        Pipeline.get_active_context()
    )
    device = "cuda" if torch.cuda.is_available() else "cpu"

    predictor = SAM2ModelPredictor(model=model, device=device)

    # ðŸ“‚ RÃ©cupÃ©rer les chemins dâ€™image
    image_paths = predictor.pre_process_dataset(dataset)

    # ðŸ§  InfÃ©rence
    results = predictor.run_inference_on_images(image_paths)

    # ðŸ“¤ Post-traitement en prÃ©dictions Picsellia
    predictions = predictor.post_process_results(image_paths, results, dataset)

    # ðŸ“Š Ã‰valuation Picsellia
    evaluate_model_impl(
        context=context,
        picsellia_predictions=predictions,
        inference_type=model.model_version.type,
        assets=dataset.assets,
        output_dir=os.path.join(context.working_dir, "evaluation"),
        training_labelmap=context.experiment.get_log("labelmap").data,
    )

    print("âœ… Ã‰valuation SAM2 terminÃ©e et logguÃ©e.")
