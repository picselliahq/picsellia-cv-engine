[project]
name = "picsellia-cv-engine"
version = "0.1.0"
description = ""
authors = [
    { name = "SoniaGrh", email = "sonia.garrouch@hotmail.fr" }
]
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.10,<3.14"
picsellia = ">=6.20.0,<7.0.0"
tabulate = ">=0.8,<0.10"
numpy = ">=1.21,<2.0.0"
pandas = ">=1.3,<3.0.0"
pycocotools = ">=2.0.4,<3.0.0"
scikit-learn = ">=1.1,<1.7"

ultralytics = { version = ">=8.0,<9.0", optional = true }
torch = { version = "2.7.1", optional = true }

torchvision = { version = "0.22.1", optional = true }
datasets = { version = "4.0.0", optional = true }
Pillow = { version = "10.3.0", optional = true }
transformers = { version = "4.54.1", optional = true }
accelerate = { version = "1.9.0", optional = true }
protobuf = { version = "6.31.1", optional = true }
opencv-python = { version = "4.11.0.86", optional = true }
matplotlib = { version = "3.10.5", optional = true }
umap-learn = { version = "0.5.9.post2", optional = true }
hdbscan = { version = "0.8.40", optional = true }

tqdm = { version = "4.67.1", optional = true }
hydra-core = { version = "1.3.2", optional = true }
iopath = { version = "0.1.10", optional = true }
submitit = { version = "1.5.3", optional = true }
tensordict = { version = "0.5", optional = true }
tensorboard = { version = "2.20.0", optional = true }
fvcore = { version = "0.1.5.post20221221", optional = true }
sam-2 = { git = "https://github.com/facebookresearch/sam2.git", optional = true }

[tool.poetry.extras]
ultralytics = ["torch", "ultralytics"]
clip = [
  "torch",
  "torchvision",
  "datasets",
  "transformers",
  "accelerate",
  "protobuf",
  "opencv-python",
  "matplotlib",
  "umap-learn",
  "hdbscan",
]
sam2 = [
#    "torch",
#    "torchvision",
    "tqdm",
    "hydra-core",
    "iopath",
    "submitit",
    "tensordict",
    "tensorboard",
    "fvcore",
    "sam-2",
]

[tool.poetry.group.dev.dependencies]
mkdocs = ">=1.4,<2.0"
mkdocs-material = ">=9.1,<10.0"
mkdocstrings-python = ">=1.2,<2.0.0"
pytest = ">=7.0,<9.0"
pytest-cov = ">=4.0,<6.0"
pre-commit = "^4.2.0"


[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff.lint]
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    "I", # isort
    "C", # flake8-comprehensions
    "B", # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
]
